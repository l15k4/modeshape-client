<?xml version="1.0" encoding="UTF-8"?>
<configuration xmlns:mode="http://www.modeshape.org/1.0"
	xmlns:jcr="http://www.jcp.org/jcr/1.0">

	<mode:sources jcr:primaryType="nt:unstructured">
		<mode:source jcr:name="inMemorySource"
			mode:classname="org.modeshape.graph.connector.inmemory.InMemoryRepositorySource"
			mode:retryLimit="3" mode:defaultWorkspaceName="workspace1" />

		<mode:source jcr:name="fileSystemSource"
			mode:classname="org.modeshape.connector.filesystem.FileSystemSource"
			mode:workspaceRootPath="./ufoSource" mode:defaultWorkspaceName="workspace1"
			mode:creatingWorkspacesAllowed="false" mode:updatesAllowed="true" />

		<mode:source jcr:name="jpaSource"
			mode:classname="org.modeshape.connector.store.jpa.JpaSource"
			mode:model="Simple" mode:dialect="org.hibernate.dialect.HSQLDialect"
			mode:driverClassName="org.hsqldb.jdbcDriver" mode:username="sa"
			mode:password="" mode:url="jdbc:hsqldb:mem:target"
			mode:maximumConnectionsInPool="1" mode:referentialIntegrityEnforced="true"
			mode:largeValueSizeInBytes="10000" mode:retryLimit="3"
			mode:compressData="false" mode:predefinedWorkspaceNames="workspace2"
			mode:showSql="false" mode:autoGenerateSchema="create"
			mode:creatingWorkspacesAllowed="true" mode:defaultWorkspaceName="workspace2" />
	</mode:sources>

	<mode:sequencers>
		<mode:sequencer jcr:name="MSOffice Sequencer"
			mode:classname="org.modeshape.sequencer.msoffice.MSOfficeMetadataSequencer">
			<mode:description>MS document metadata sequencer</mode:description>
			<mode:pathExpression>//(*.(doc|docx|xls|ppt)[*])/jcr:content[@jcr:data]
				=> /msdocs/$1</mode:pathExpression>
			<mode:pathExpression>//(*.(doc|docx|xls|ppt)[*])/transl:translatedcontent[@jcr:data]
				=> /msdocs/$1</mode:pathExpression>
		</mode:sequencer>
	</mode:sequencers>
	<!-- Define the mime type detectors. This is an optional section. By default, 
		each engine will use the MIME type detector that uses filename extensions. 
		So we wouldn't need to define the same detector again, but this is how you'd 
		define another extension. -->
	<mode:mimeTypeDetectors>
		<mode:mimeTypeDetector jcr:name="Detector">
			<mode:description>Standard extension-based MIME type detector
			</mode:description>
			<!-- Specify the implementation class (required), as a child element or 
				attribute on parent element. -->
			<mode:classname>org.modeshape.graph.mimetype.ExtensionBasedMimeTypeDetector
			</mode:classname>
			<!-- Specify the classpath (optional) as an ordered list of 'names', where 
				each name is significant to the classpath factory. For example, a name could 
				be an OSGI identifier or a Maven coordinate, depending upon the classpath 
				factory being used. If there is only one 'name' in the classpath, it may 
				be specified as an attribute on the 'mimeTypeDetector' element. If there 
				is more than one 'name', then they must be specified as child 'classpath' 
				elements. Blank or empty values are ignored. -->
			<mode:classpath></mode:classpath>
			<mode:classpath></mode:classpath>
		</mode:mimeTypeDetector>
	</mode:mimeTypeDetectors>

	<mode:textExtractors>

		<mode:textExtractor jcr:name="Tika Text Extractors">
			<mode:description>Text extractors using Tika parsers
			</mode:description>
			<mode:classname>org.modeshape.extractor.tika.TikaTextExtractor
			</mode:classname>

			<!-- A comma- or whitespace-delimited list of MIME types that are to be 
				excluded. The following are excluded by default, but the default is completely 
				overridden when this property is set. In other words, if you explicitly exclude 
				any MIME types, be sure to list all of the MIME types you want to exclude. 
				Exclusions always have a higher precedence than inclusions. -->
			<mode:excludedMimeTypes>
				application/x-archive,application/x-bzip,application/x-bzip2,
				application/x-cpio,application/x-gtar,application/x-gzip,
				application/x-ta,application/zip,application/vnd.teiid.vdb
			</mode:excludedMimeTypes>

			<!-- A comma- or whitespace-delimited list of MIME types that are to be 
				included. If this is used, then the extractor will include only those MIME 
				types found in this list for which there is an available parser (unless the 
				MIME type is also excluded). Including explicit MIME types is often easier 
				if text is to be extracted for are only a few MIME types. -->
			<mode:includedMimeTypes>
				application/msword,application/vnd.oasis.opendocument.text
			</mode:includedMimeTypes>
		</mode:textExtractor>

		<!-- other extractors -->

	</mode:textExtractors>

	<!-- Define the JCR repositories -->
	<mode:repositories>
		<mode:repository jcr:name="inMemoryRepo">
			<!-- Specify the source that should be used for the repository -->
			<mode:source>inMemorySource</mode:source>
			<!-- Define any custom node types. Importing CND files via JcrConfiguration 
				is equivalent to specifying here. -->
			<jcr:nodeTypes mode:resource="/cnd/mixins.cnd" />
			<!-- Define the options for the JCR repository, using camelcase version 
				of JcrRepository.Option names -->
			<mode:options jcr:primaryType="mode:options">
				<jaasLoginConfigName jcr:primaryType="mode:option"
					mode:value="modeshape-jcr" />
			</mode:options>
		</mode:repository>
		<mode:repository jcr:name="fileSystemRepo">
			<!-- Specify the source that should be used for the repository -->
			<mode:source>fileSystemSource</mode:source>
			<!-- Define any custom node types. Importing CND files via JcrConfiguration 
				is equivalent to specifying here. -->
			<jcr:nodeTypes mode:resource="/cnd/mixins.cnd" />
			<mode:options jcr:primaryType="mode:options">
				<jaasLoginConfigName jcr:primaryType="mode:option"
					mode:value="modeshape-jcr" />
			</mode:options>
			<!-- Define any namespaces for this repository, other than those already 
				defined by JCR or ModeShape -->
			<namespaces jcr:primaryType="mode:namespaces" />
		</mode:repository>
		<mode:repository jcr:name="jpaRepo">
			<!-- Specify the source that should be used for the repository -->
			<mode:source>jpaSource</mode:source>
			<!-- Define any custom node types. Importing CND files via JcrConfiguration 
				is equivalent to specifying here. -->
			<jcr:nodeTypes mode:resource="/cnd/mixins.cnd" />
			<!-- Define the options for the JCR repository, using camelcase version 
				of JcrRepository.Option names -->
			<mode:options jcr:primaryType="mode:options">
				<jaasLoginConfigName jcr:primaryType="mode:option"
					mode:value="modeshape-jcr" />
			</mode:options>
		</mode:repository>

	</mode:repositories>
</configuration>
